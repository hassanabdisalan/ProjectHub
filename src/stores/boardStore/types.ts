import type { Database } from '../../lib/database.types';

export type Board = Database['public']['Tables']['boards']['Row'];
export type List = Database['public']['Tables']['lists']['Row'];
export type Card = Database['public']['Tables']['cards']['Row'];
export type Label = Database['public']['Tables']['labels']['Row'];
export type Checklist = Database['public']['Tables']['checklists']['Row'];
export type ChecklistItem = Database['public']['Tables']['checklist_items']['Row'];
export type Comment = Database['public']['Tables']['comments']['Row'];
export type CardMember = Database['public']['Tables']['card_members']['Row'];

export interface BoardStore {
  boards: Board[];
  currentBoard: Board | null;
  lists: List[];
  cards: Card[];
  labels: Label[];
  checklists: Checklist[];
  checklistItems: ChecklistItem[];
  comments: Comment[];
  cardMembers: CardMember[];
  isLoading: boolean;
  error: string | null;
  fetchBoards: (workspaceId: string) => Promise<void>;
  createBoard: (workspaceId: string, name: string, description?: string) => Promise<void>;
  setCurrentBoard: (board: Board | null) => void;
  fetchLists: (boardId: string) => Promise<void>;
  createList: (boardId: string, name: string, position: number) => Promise<void>;
  updateList: (listId: string, updates: Partial<List>) => Promise<void>;
  deleteList: (listId: string) => Promise<void>;
  duplicateList: (list: List) => Promise<void>;
  updateListPosition: (listId: string, newPosition: number) => Promise<void>;
  fetchCards: (listId: string) => Promise<void>;
  createCard: (listId: string, title: string, position: number) => Promise<void>;
  updateCard: (cardId: string, updates: Partial<Card>) => Promise<void>;
  deleteCard: (cardId: string) => Promise<void>;
  duplicateCard: (card: Card) => Promise<void>;
  updateCardPosition: (cardId: string, listId: string, newPosition: number) => Promise<void>;
  fetchLabels: (boardId: string) => Promise<void>;
  createLabel: (boardId: string, name: string, color: string) => Promise<void>;
  updateLabel: (labelId: string, updates: Partial<Label>) => Promise<void>;
  deleteLabel: (labelId: string) => Promise<void>;
  assignLabel: (cardId: string, labelId: string) => Promise<void>;
  removeLabel: (cardId: string, labelId: string) => Promise<void>;
  fetchChecklists: (cardId: string) => Promise<void>;
  createChecklist: (cardId: string, title: string, position: number) => Promise<void>;
  updateChecklist: (checklistId: string, updates: Partial<Checklist>) => Promise<void>;
  deleteChecklist: (checklistId: string) => Promise<void>;
  createChecklistItem: (checklistId: string, title: string, position: number) => Promise<void>;
  updateChecklistItem: (itemId: string, updates: Partial<ChecklistItem>) => Promise<void>;
  deleteChecklistItem: (itemId: string) => Promise<void>;
  fetchComments: (cardId: string) => Promise<void>;
  createComment: (cardId: string, content: string) => Promise<void>;
  updateComment: (commentId: string, content: string) => Promise<void>;
  deleteComment: (commentId: string) => Promise<void>;
  fetchCardMembers: (cardId: string) => Promise<void>;
  assignMember: (cardId: string, userId: string) => Promise<void>;
  removeMember: (cardId: string, userId: string) => Promise<void>;
}